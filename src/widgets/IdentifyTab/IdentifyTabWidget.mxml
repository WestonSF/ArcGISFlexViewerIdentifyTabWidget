<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2010-2011 Esri
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/License.txt
//
////////////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:esri="http://www.esri.com/2008/ags"
				   xmlns:viewer="com.esri.viewer.*"				   
				   widgetConfigLoaded="init()">				   
	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.components.supportClasses.InfoWindow;
			import com.esri.ags.events.FeatureLayerEvent;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.events.GeoprocessorEvent;
			import com.esri.ags.events.IdentifyEvent;
			import com.esri.ags.events.MapEvent;
			import com.esri.ags.events.MapMouseEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.layers.FeatureLayer;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.Layer;
			import com.esri.ags.symbols.InfoSymbol;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.symbols.SimpleMarkerSymbol;
			import com.esri.ags.tasks.GeometryService;
			import com.esri.ags.tasks.Geoprocessor;
			import com.esri.ags.tasks.IdentifyTask;
			import com.esri.ags.tasks.supportClasses.BufferParameters;
			import com.esri.ags.tasks.supportClasses.DataFile;
			import com.esri.ags.tasks.supportClasses.IdentifyParameters;
			import com.esri.ags.tasks.supportClasses.IdentifyResult;
			import com.esri.ags.tasks.supportClasses.JobInfo;
			import com.esri.ags.tasks.supportClasses.Query;
			import com.esri.ags.tasks.supportClasses.RelationshipQuery;
			import com.esri.viewer.AppEvent;
			
			import flash.events.Event;
			import flash.events.TextEvent;
			import flash.text.TextField;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TabNavigator;
			import mx.containers.TitleWindow;
			import mx.containers.VBox;
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.controls.DataGrid;
			import mx.controls.Image;
			import mx.controls.Label;
			import mx.controls.LinkButton;
			import mx.controls.ProgressBar;
			import mx.controls.ProgressBarDirection;
			import mx.controls.Text;
			import mx.controls.TextArea;
			import mx.controls.TextInput;
			import mx.core.FlexGlobals;
			import mx.core.Repeater;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncResponder;
			import mx.rpc.events.FaultEvent;
			
			import spark.components.Group;
			import spark.components.HGroup;
			import spark.components.Label;
			import spark.components.Panel;
			import spark.components.VGroup;
			
			// Parameters from xml config
			[Bindable]private var geometryServiceURL:String;
			[Bindable]private var windowheight:Number;
			[Bindable]private var windowwidth:Number;
			[Bindable]private var windowalpha:Number;
			[Bindable]private var windowtitle:String;			
			[Bindable]private var relateButtonLabel:String;
			[Bindable]private var selectButtonLabel:String;
			[Bindable]private var selectFeatureMapService:String;
			[Bindable]private var relateID:Number;
			
			// Graphics layer for identify selection
			private var clickGraphicsLayer:GraphicsLayer = new GraphicsLayer();
			
			private var mapPoint:MapPoint = new MapPoint();
			
			private var relateLayer:FeatureLayer = new FeatureLayer();
			private var selectionLayer:FeatureLayer = new FeatureLayer();
			private var relatedDatagrid:DataGrid = new DataGrid();
			private var dataGridWindow:TitleWindow = new TitleWindow();
			
			private var removeFields:Array = new Array();
			private var defaultTabs:Array = new Array();
			
			// Setup the group and tabs for the identify popup
			private var popupGroup:VGroup = new VGroup();
			private var layerTabs:TabNavigator = new TabNavigator();			
			
			// Status text
			[Bindable]
			private var _status:String = "Pan";
			
			[Embed(source='assets/table.png')]
			[Bindable]
			public var tableIcon:Class;
			
			[Embed(source='assets/select.png')]
			[Bindable]
			public var selectIcon:Class;			
			
			private function init():void
			{					
				// Check for configuration file
				if (configXML) 
				{	
					geometryServiceURL = configXML.geometryServiceURL;
					windowheight = configXML.windowheight;
					windowwidth = configXML.windowwidth;
					windowalpha = configXML.windowalpha;
					windowtitle = configXML.windowtitle;	
					relateButtonLabel = configXML.relateButtonLabel;
					selectButtonLabel = configXML.selectButtonLabel;
					selectFeatureMapService = configXML.selectFeatureMapService;
					relateID = configXML.relateID;
					
					// Add listener for when map is clicked
					map.addEventListener(MapMouseEvent.MAP_CLICK, mapClickHandler);	
					// Add listener for when info window is closed
					map.infoWindow.addEventListener(Event.CLOSE, infoCloseHandler); 
					// Add the initial graphics layer to map for selections
					map.addLayer(clickGraphicsLayer);	
					
					// Add listener for any status changes so popups only come on with zoom/pan enabled
					AppEvent.addListener(AppEvent.SET_STATUS, showStatus);					
				}
			}
			
			
			private function showStatus(event:AppEvent):void
			{
				if (event.data)
					_status = event.data as String;
			}	
			
			// When info window is closed
			private function infoCloseHandler(event:Event):void
			{
				// Clear the graphics layer
				clickGraphicsLayer.clear();
			}	
			
			// When map is clicked
			private function mapClickHandler(event:MapMouseEvent):void
			{				
				if (_status == "Pan" || _status == "Zoom in" || _status == "Zoom out"){
					doIdentify(event.mapPoint,null,null);					
				}			
			}			
			
			
			// Execute the identify task
			private function doIdentify(event:MapPoint,event2:Polygon,mode:String):void
			{						
				// Clear previous graphics if new identify
				if (mode != "Select") {
					clickGraphicsLayer.clear();					
				}
				
				// If polygon provided then coming from selection button
				if (event2 != null) {
					mapPoint = mapPoint;
				}
				else
				{
					// Assign the map Point to the global var
					mapPoint = event;
					
				}
				
				// Set info window style and clear previous content			
				map.infoWindow.hide();
				map.infoWindow.height = windowheight;
				map.infoWindow.width = windowwidth;
				map.infoWindow.alpha = windowalpha;
				map.infoWindow.label = windowtitle;	
				layerTabs.removeAll();
				popupGroup.removeAllElements();
				
				// Iterate through map services set in config		
				for each (var mapConfigXml:XML in configXML.mapservices.mapservice)
				{
					// Identify parameters from config					
					var identifyParams:IdentifyParameters = new IdentifyParameters();
					identifyParams.returnGeometry = true;
					identifyParams.tolerance = 5;
					identifyParams.layerIds = [mapConfigXml.identifyLayers];
					identifyParams.width = map.width;
					identifyParams.height = map.height;
					
					// If polygon provided then coming from selection button
					if (event2 != null) {
						identifyParams.geometry = event2;
					}
					else
					{
						identifyParams.geometry = mapPoint;					
					}
					
					identifyParams.mapExtent = map.extent;
					identifyParams.spatialReference = map.spatialReference;
					identifyParams.layerOption = "visible";
					
					// Get fields to be removed from map service and defaulttab					
					var removeFieldsString:String = mapConfigXml.removeFields;	
					defaultTabs.push(mapConfigXml.defaulttab);
					
					// Getting the layer from the map and checking it's visibility
					if (map.getLayer(mapConfigXml.layername).visible == true)
					{								
						// Execute identify task, which will load data into layerTabs
						var identifyTask:IdentifyTask = new IdentifyTask();
						identifyTask.url = mapConfigXml.url;
						identifyTask.disableClientCaching = true;						
						identifyTask.addEventListener(IdentifyEvent.EXECUTE_COMPLETE,function(event:IdentifyEvent):void {
							onResult(event,removeFieldsString);
						});
						
						identifyTask.addEventListener(FaultEvent.FAULT, onFault);    		
						identifyTask.execute(identifyParams);					
					}
				}	 			
				
				// Add the tabs to the infoWindow 
				popupGroup.addElement(layerTabs);
				map.infoWindow.content = popupGroup;
			}
			
			// Identify results function
			private function onResult(event:IdentifyEvent,removeFieldsString:String):void
			{							
				// If features returned
				if (event.identifyResults.length > 0)
				{	
					// Setup arrays to hold data from map service
					var layerResults:Array = new Array();
					var featureResults:Array = new Array();
					var layerURLs:Array = new Array();
					
					// Put attributes into array that need to be removed
					removeFields = removeFieldsString.split(",");
					
					for (var i:int=0; i< event.identifyResults.length; i++)
					{
						
						// Get the title of the layer	
						var result:IdentifyResult = event.identifyResults[i];
						var resultGraphic:Graphic = result.feature;
						
						// Get the geometry type returned and set symbology
						switch (resultGraphic.geometry.type)
						{
							case Geometry.MAPPOINT:
							{
								// Apply symbology
								resultGraphic.symbol = symPoint;
								break;
							}		
							case Geometry.POLYGON:
							{
								// Apply symbology
								resultGraphic.symbol = symPolygon;	
								break;
							}			
							case Geometry.POLYLINE:
							{
								// Apply symbology
								resultGraphic.symbol = symLine;
								break;
							}											
						}
						// Add the graphic to the map
						clickGraphicsLayer.add(resultGraphic);						
						
						var title:String = result.layerName;
						
						// Load into an array all the layers returned and default tab to select
						layerResults.push({name:title, value:1});		
						
						// Load into array the layer, id and url details needed for table relate info
						layerURLs.push({name:title, id:result.layerId, url:event.target.url});
						
						// Load into an array all the attributes returned
						featureResults.push({name:title, results:resultGraphic.attributes});
					}
					
					// Call the combine function to get the unique layers returned and how many features in each
					var layersResultsUnique:Array = combine(layerResults);
					// For each unique layer, create a tab
					var uniqueLayer:Object;
					for each(uniqueLayer in layersResultsUnique)
					{
						// Create the tabs based on the different layers returned
						var layerbox:VBox = new VBox();	
						layerbox.name = uniqueLayer.name;
						layerbox.label = uniqueLayer.name + " (" + uniqueLayer.value + ")";
						layerTabs.addChild(layerbox);	
						
						// Go through the map service default tabs
						for (var z:int=0; z< defaultTabs.length; z++)
						{				
							// If layer name is in there then select it
							if (uniqueLayer.name == defaultTabs[z]) {
								// Select the tab that was just added
								layerTabs.selectedIndex = layerTabs.numChildren-1;			
							}							
						}						
						
						// Setup text box
						var attributeText:TextArea = new TextArea();
						attributeText.setStyle("borderStyle","none");
						attributeText.setStyle("backgroundColor" , "transparent");
						attributeText.height=windowheight;
						attributeText.width=windowwidth;
						attributeText.editable = false;					
						layerbox.addChild(attributeText);
						
						// Get the layerID and url from the layerURLs array using the name of the layer
						for (var k:int=0; k< layerURLs.length; k++)
						{
							// For each of the layer names assign its url and layer id
							if (uniqueLayer.name == layerURLs[k].name) {
								var featureLayerName:String = layerURLs[k].url + "/" + layerURLs[k].id;							
							}							
						}												
						
						// Add a button for related tables
						var layerrelateButton:Button = new Button();
						layerrelateButton.id = featureLayerName;
						layerrelateButton.label = relateButtonLabel;
						layerrelateButton.setStyle("icon", tableIcon);
						layerrelateButton.setStyle("fontWeight", "bold");
						layerrelateButton.addEventListener(MouseEvent.CLICK, relateButtonClick);						
						layerbox.addChild(layerrelateButton);
						
						// Add a button for feature selection
						var featureselectionButton:Button = new Button();
						featureselectionButton.id = featureLayerName;
						featureselectionButton.label = selectButtonLabel;
						featureselectionButton.setStyle("icon", selectIcon);
						featureselectionButton.setStyle("fontWeight", "bold");	
						featureselectionButton.addEventListener(MouseEvent.CLICK, selectButtonClick);
						layerbox.addChild(featureselectionButton);
						
						// Add in the attribute data to the textbox
						// Iterate through attribute info and load relvant attributes into tab
						var content:String = "";
						var featureLayerCount:Number = 0;
						for (var j:int=0; j< featureResults.length; j++)
						{							
							// Get all the attributes and load them into a text area
							var attributesObject:Object = featureResults[j].results;							
							var featureID:String;
							var value:String;	
							// If name equals layer name add in attributes
							if (uniqueLayer.name == featureResults[j].name)
							{												
								// Add end of the feature break if another feature has already been added
								if (featureLayerCount > 0)
								{								
									content += "\n" + "--------------------------------------------------------------" + "\n\n";									
								}								
								
								// Setup arrays to hold link details
								var hyperlinkvariablename:Array = new Array();
								var hyperlinkvariablelink:Array = new Array();
								var hyperlinkvariablelinkName:Array = new Array();
								// Iterate through hyperlinks set in config and check if current layer is in there	
								var hyperlinkcount:int = 0;
								for each (var linkConfigXml:XML in configXML.hyperlinks.hyperlink)
								{
									// If current layer is in hyperlink then get the variable and the link
									if (uniqueLayer.name == linkConfigXml.layername)
									{
										hyperlinkvariablename[hyperlinkcount] = linkConfigXml.variable; 
										hyperlinkvariablelink[hyperlinkcount] = linkConfigXml.link;
										hyperlinkvariablelinkName[hyperlinkcount] = linkConfigXml.linkName;
									}
									hyperlinkcount++;
								}
								
								// For each attribute
								for (featureID in attributesObject)
								{
									var count:int = 0;
									var remove:Boolean = false;								
									// Check to see if the field needs to be removed									
									while ((count < removeFields.length))	
									{    
										if (featureID.toLowerCase() == removeFields[count].toLowerCase()) {
											remove = true;
										}
										count++;
									}
									
									// If field doesn't need to be removed then add it in              
									if (remove == false) {
										value = attributesObject[featureID].toString();
										content += "<B>" + featureID + "  -  " + value + "<\B>" + "\n";	
									}		
									
									var count2:int = 0;
									while (hyperlinkvariablename.length > count2)
									{
										// If the attribute name is in the config, then get the value
										if (featureID == hyperlinkvariablename[count2]) {
											// Update the hyperlink to include the value
											var hyperlinkvariablenameString:String = hyperlinkvariablename[count2]
											var hyperlinkvariablelinkString:String = hyperlinkvariablelink[count2]
											var newlink:String = hyperlinkvariablelinkString.replace(hyperlinkvariablenameString, attributesObject[featureID].toString());									
											hyperlinkvariablelink[count2] = newlink;
										}										
										count2++;
									}
								}								
								
								// If there is a hyperlink value set then add in the hyperlink to the record
								var count3:int = 0;								
								while (hyperlinkvariablename.length > count3)
								{
									if (hyperlinkvariablename[count3]) {
										content += "<font size=\"16\">"
										content += "\n" + "<B>" + "<a href=\"" + hyperlinkvariablelink[count3] + "\" target=\"_blank\">" + hyperlinkvariablelinkName[count3] + "</a>" + "\n";
										content += "</font><font size=\"12\">"
									}	
									count3++;
								}				
								// Add to counter
								featureLayerCount++;
							}
						}							
						// Add the content into the tab
						attributeText.htmlText = content;
					}	
					
					// Get the point where user clicked
					const screenPoint:Point = map.toScreen(mapPoint)						
					// Show the info window	and hide the progress bar
					map.infoWindow.show(map.toMap(screenPoint));
				}	
					// If no results found
				else {
				}
			}		
			
			
			// When selection button clicked
			private function selectButtonClick(event:MouseEvent):void
			{
				// Create the feature layer from the tab that was selected and execute new query on it							
				selectionLayer.mode = "selection";
				// Selection id from the slection layer in xml
				selectionLayer.url = selectFeatureMapService;
				selectionLayer.outFields = ["*"];		
				selectionLayer.addEventListener(FeatureLayerEvent.SELECTION_COMPLETE, doSelection);
				var selectionQuery:Query = new Query();
				selectionQuery.geometry = mapPoint;
				selectionQuery.returnGeometry = true;
				selectionLayer.selectFeatures(selectionQuery, FeatureLayer.SELECTION_NEW);
			}
			
			
			// After feature layer selection
			private function doSelection(event:FeatureLayerEvent):void
			{
				// If features returned
				if (event.features.length > 0)
				{	
					// show the feature selected
					var resultGraphic:Graphic = event.features[0];
					
					// Get the geometry type returned and set symbology
					switch (resultGraphic.geometry.type)
					{
						case Geometry.MAPPOINT:
						{
							// Apply symbology
							resultGraphic.symbol = symPointSecondary;
							break;
						}		
						case Geometry.POLYGON:
						{
							// Apply symbology
							resultGraphic.symbol = symPolygonSecondary;	
							break;
						}			
						case Geometry.POLYLINE:
						{
							// Apply symbology
							resultGraphic.symbol = symLineSecondary;
							break;
						}											
					}
					// Add the graphic to the map
					clickGraphicsLayer.add(resultGraphic);				
					
					// Reverse buffer the feature so its not touching boundary of other features
					var geometryService:GeometryService = new GeometryService();
					geometryService.url = geometryServiceURL;
					var bufferParameters:BufferParameters = new BufferParameters();
					bufferParameters.geometries = [ event.features[0].geometry ];
					bufferParameters.distances = [ -1 ];
					bufferParameters.unit = GeometryService.UNIT_METER;
					bufferParameters.bufferSpatialReference = map.spatialReference;
					bufferParameters.outSpatialReference = map.spatialReference;
					
					geometryService.addEventListener(GeometryServiceEvent.BUFFER_COMPLETE, bufferCompleteHandler);
					geometryService.buffer(bufferParameters);
					
					var newPolygon:Polygon = new Polygon();
					function bufferCompleteHandler(event:GeometryServiceEvent):void
					{
						geometryService.removeEventListener(GeometryServiceEvent.BUFFER_COMPLETE, bufferCompleteHandler);
						
						for each (var geometry:Polygon in event.result)
						{
							newPolygon = geometry;
							// Send feature to identify
							doIdentify(null,newPolygon,"Select");
						}
					}					
				}								
				else {
					Alert.show("No Features Intersecting");
				}			
			}	
			
			
			// When relate button is clicked
			private function relateButtonClick(event:MouseEvent):void
			{
				// Create the feature layer from the tab that was selected and execute new query on it							
				relateLayer.mode = "selection";
				relateLayer.url = event.target.id;
				relateLayer.outFields = ["*"];			
				relateLayer.addEventListener(FeatureLayerEvent.SELECTION_COMPLETE, findRelated);
				
				var selectionQuery:Query = new Query();
				var tol:Number = map.extent.width / map.width * 5;
				var x:Number = mapPoint.x;
				var y:Number = mapPoint.y;
				var queryExtent:Extent = new Extent(x - tol, y - tol, x + tol, y + tol, map.spatialReference);				
				selectionQuery.geometry = queryExtent;
				selectionQuery.returnGeometry = true;
				relateLayer.selectFeatures(selectionQuery, FeatureLayer.SELECTION_NEW);			
			}	
			
			// After feature layer selection
			private function findRelated(event:FeatureLayerEvent):void
			{						
				// Setup query to get related tables for layer clicked
				var relatedTableQuery:RelationshipQuery = new RelationshipQuery();
				relatedTableQuery.outFields = ["*"];
				relatedTableQuery.relationshipId = relateID;
				
				// Get the object IDs to be queried	
				var objIds:Array = new Array();
				for each (var g:Graphic in event.features)
				{
					objIds.push(g.attributes.OBJECTID)
				}
				relatedTableQuery.objectIds = objIds;
				
				// Query the related records
				relateLayer.queryRelatedFeatures(relatedTableQuery, new AsyncResponder(onResult, onFault));
				relatedDatagrid.dataProvider = null;
				var attrs:Array = new Array();
				
				function onResult(relatedRecords:Object, token:Object = null):void
				{	
					for each (var i:FeatureSet in relatedRecords)
					{
						// For each of the records returned, push into array
						for each (var j:Graphic in i.features)
						{							
							attrs.push(j.attributes);
						}
					}
					// Load attrbiutes into data grid
					relatedDatagrid.dataProvider = attrs;
					
					// Show attrbute table with results if available
					if (attrs.length > 0)
					{				
						// Panel for results				
						dataGridWindow.showCloseButton = true;
						dataGridWindow.addEventListener(CloseEvent.CLOSE, closerelateWindow);
						dataGridWindow.addElement(relatedDatagrid);
						PopUpManager.addPopUp(dataGridWindow, FlexGlobals.topLevelApplication as DisplayObject, true);
						PopUpManager.centerPopUp(dataGridWindow);
					}
					else {
						Alert.show("No Information Available");
					}
				}
				
				// Query fault handler
				function onFault(info:Object, token:Object = null):void
				{
					Alert.show("No Information Available");
					// Alert.show(info.toString(), "Query Problem");
				}
			}
			
			// Combines values in objects that have identical names - @param ar The array to assess
			private function combine(ar:Array):Array
			{
				var hold:Array = [];
				var back:Array = [];
				
				var i:Object;
				for each(i in ar)
				{
					if(!hold[i.name]) hold[i.name] = i.value;
					else hold[i.name] += i.value;
				}
				
				var j:String;
				for(j in hold)
				{
					back.push({name: j, value: hold[j]});
				}				
				return back;
			}	
			
			// Close the relate window popup
			private function closerelateWindow(evt:CloseEvent):void {
				PopUpManager.removePopUp(dataGridWindow);
			}
			
			// Identify error function
			private function onFault(event:FaultEvent):void
			{                    
				// Display the error message
				Alert.show(event.fault.faultDetail);         
			}	
			
			
		]]>
	</fx:Script>	
	
	<fx:Declarations>
		<!-- Symbol for Identify Results -->
		<esri:SimpleFillSymbol id="symPolygon" color="0xffff33" alpha="0" outline="{symLine}" />
		<esri:SimpleFillSymbol id="symPolygonSecondary" color="0xFF0000" alpha="0" outline="{symLineSecondary}" />		
		<esri:SimpleLineSymbol id="symLine" color="0xffff33" style="solid" alpha="1" width="4"/>
		<esri:SimpleLineSymbol id="symLineSecondary" color="0xFF0000" style="solid" alpha="0.5" width="3"/>
		<esri:SimpleMarkerSymbol id="symPoint" color="0xffff33" size="10" style="circle"/>
		<esri:SimpleMarkerSymbol id="symPointSecondary" color="0xFF0000" size="10" style="circle"/>
	</fx:Declarations>
	
</viewer:BaseWidget>
